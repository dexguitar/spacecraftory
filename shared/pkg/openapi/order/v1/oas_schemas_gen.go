// Code generated by ogen, DO NOT EDIT.

package order_v1

import (
	"fmt"

	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

func (s *GenericErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/bad_request_error
type BadRequestError struct {
	// Error code.
	Code int `json:"code"`
	// Error message.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *BadRequestError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *BadRequestError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *BadRequestError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *BadRequestError) SetMessage(val string) {
	s.Message = val
}

func (*BadRequestError) createOrderRes() {}

// CancelOrderNoContent is response for CancelOrder operation.
type CancelOrderNoContent struct{}

func (*CancelOrderNoContent) cancelOrderRes() {}

// Ref: #/components/schemas/conflict_error
type ConflictError struct {
	// Error code.
	Code int `json:"code"`
	// Error message.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *ConflictError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ConflictError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *ConflictError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ConflictError) SetMessage(val string) {
	s.Message = val
}

func (*ConflictError) cancelOrderRes() {}
func (*ConflictError) payOrderRes()    {}

// Ref: #/components/schemas/create_order_request
type CreateOrderRequest struct {
	// UUID of the user placing the order.
	UserUUID uuid.UUID `json:"user_uuid"`
	// List of part UUIDs to include in the order.
	PartUuids []uuid.UUID `json:"part_uuids"`
}

// GetUserUUID returns the value of UserUUID.
func (s *CreateOrderRequest) GetUserUUID() uuid.UUID {
	return s.UserUUID
}

// GetPartUuids returns the value of PartUuids.
func (s *CreateOrderRequest) GetPartUuids() []uuid.UUID {
	return s.PartUuids
}

// SetUserUUID sets the value of UserUUID.
func (s *CreateOrderRequest) SetUserUUID(val uuid.UUID) {
	s.UserUUID = val
}

// SetPartUuids sets the value of PartUuids.
func (s *CreateOrderRequest) SetPartUuids(val []uuid.UUID) {
	s.PartUuids = val
}

// Ref: #/components/schemas/create_order_response
type CreateOrderResponse struct {
	// Unique identifier of the created order.
	OrderUUID uuid.UUID `json:"order_uuid"`
	// Total price of the order.
	TotalPrice float64 `json:"total_price"`
}

// GetOrderUUID returns the value of OrderUUID.
func (s *CreateOrderResponse) GetOrderUUID() uuid.UUID {
	return s.OrderUUID
}

// GetTotalPrice returns the value of TotalPrice.
func (s *CreateOrderResponse) GetTotalPrice() float64 {
	return s.TotalPrice
}

// SetOrderUUID sets the value of OrderUUID.
func (s *CreateOrderResponse) SetOrderUUID(val uuid.UUID) {
	s.OrderUUID = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *CreateOrderResponse) SetTotalPrice(val float64) {
	s.TotalPrice = val
}

func (*CreateOrderResponse) createOrderRes() {}

// Ref: #/components/schemas/generic_error
type GenericError struct {
	// Error code.
	Code int `json:"code"`
	// Error message.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *GenericError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GenericError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *GenericError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GenericError) SetMessage(val string) {
	s.Message = val
}

// GenericErrorStatusCode wraps GenericError with StatusCode.
type GenericErrorStatusCode struct {
	StatusCode int
	Response   GenericError
}

// GetStatusCode returns the value of StatusCode.
func (s *GenericErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *GenericErrorStatusCode) GetResponse() GenericError {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *GenericErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *GenericErrorStatusCode) SetResponse(val GenericError) {
	s.Response = val
}

// Ref: #/components/schemas/internal_server_error
type InternalServerError struct {
	// Error code.
	Code int `json:"code"`
	// Error message.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *InternalServerError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *InternalServerError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *InternalServerError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *InternalServerError) SetMessage(val string) {
	s.Message = val
}

func (*InternalServerError) cancelOrderRes()    {}
func (*InternalServerError) createOrderRes()    {}
func (*InternalServerError) getOrderByUUIDRes() {}
func (*InternalServerError) payOrderRes()       {}

// Ref: #/components/schemas/not_found_error
type NotFoundError struct {
	// Error code.
	Code int `json:"code"`
	// Error message.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *NotFoundError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *NotFoundError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *NotFoundError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *NotFoundError) SetMessage(val string) {
	s.Message = val
}

func (*NotFoundError) cancelOrderRes()    {}
func (*NotFoundError) getOrderByUUIDRes() {}
func (*NotFoundError) payOrderRes()       {}

// NewOptNilPaymentMethod returns new OptNilPaymentMethod with value set to v.
func NewOptNilPaymentMethod(v PaymentMethod) OptNilPaymentMethod {
	return OptNilPaymentMethod{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentMethod is optional nullable PaymentMethod.
type OptNilPaymentMethod struct {
	Value PaymentMethod
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentMethod was set.
func (o OptNilPaymentMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentMethod) Reset() {
	var v PaymentMethod
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentMethod) SetTo(v PaymentMethod) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentMethod) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentMethod) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentMethod
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentMethod) Get() (v PaymentMethod, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentMethod) Or(d PaymentMethod) PaymentMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilUUID returns new OptNilUUID with value set to v.
func NewOptNilUUID(v uuid.UUID) OptNilUUID {
	return OptNilUUID{
		Value: v,
		Set:   true,
	}
}

// OptNilUUID is optional nullable uuid.UUID.
type OptNilUUID struct {
	Value uuid.UUID
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilUUID was set.
func (o OptNilUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilUUID) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilUUID) SetToNull() {
	o.Set = true
	o.Null = true
	var v uuid.UUID
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilUUID) Get() (v uuid.UUID, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/order_dto
type OrderDto struct {
	// Unique identifier of the order.
	OrderUUID uuid.UUID `json:"order_uuid"`
	// Unique identifier of the user who placed the order.
	UserUUID uuid.UUID `json:"user_uuid"`
	// List of part UUIDs included in the order.
	PartUuids []uuid.UUID `json:"part_uuids"`
	// Total price of the order.
	TotalPrice float64 `json:"total_price"`
	// Unique identifier of the payment transaction (present only if order is paid).
	TransactionUUID OptNilUUID `json:"transaction_uuid"`
	// Payment method used (present only if order is paid).
	PaymentMethod OptNilPaymentMethod `json:"payment_method"`
	Status        OrderStatus         `json:"status"`
}

// GetOrderUUID returns the value of OrderUUID.
func (s *OrderDto) GetOrderUUID() uuid.UUID {
	return s.OrderUUID
}

// GetUserUUID returns the value of UserUUID.
func (s *OrderDto) GetUserUUID() uuid.UUID {
	return s.UserUUID
}

// GetPartUuids returns the value of PartUuids.
func (s *OrderDto) GetPartUuids() []uuid.UUID {
	return s.PartUuids
}

// GetTotalPrice returns the value of TotalPrice.
func (s *OrderDto) GetTotalPrice() float64 {
	return s.TotalPrice
}

// GetTransactionUUID returns the value of TransactionUUID.
func (s *OrderDto) GetTransactionUUID() OptNilUUID {
	return s.TransactionUUID
}

// GetPaymentMethod returns the value of PaymentMethod.
func (s *OrderDto) GetPaymentMethod() OptNilPaymentMethod {
	return s.PaymentMethod
}

// GetStatus returns the value of Status.
func (s *OrderDto) GetStatus() OrderStatus {
	return s.Status
}

// SetOrderUUID sets the value of OrderUUID.
func (s *OrderDto) SetOrderUUID(val uuid.UUID) {
	s.OrderUUID = val
}

// SetUserUUID sets the value of UserUUID.
func (s *OrderDto) SetUserUUID(val uuid.UUID) {
	s.UserUUID = val
}

// SetPartUuids sets the value of PartUuids.
func (s *OrderDto) SetPartUuids(val []uuid.UUID) {
	s.PartUuids = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *OrderDto) SetTotalPrice(val float64) {
	s.TotalPrice = val
}

// SetTransactionUUID sets the value of TransactionUUID.
func (s *OrderDto) SetTransactionUUID(val OptNilUUID) {
	s.TransactionUUID = val
}

// SetPaymentMethod sets the value of PaymentMethod.
func (s *OrderDto) SetPaymentMethod(val OptNilPaymentMethod) {
	s.PaymentMethod = val
}

// SetStatus sets the value of Status.
func (s *OrderDto) SetStatus(val OrderStatus) {
	s.Status = val
}

func (*OrderDto) getOrderByUUIDRes() {}

// Current status of the order.
// Ref: #/components/schemas/order_status
type OrderStatus string

const (
	OrderStatusUNKNOWN        OrderStatus = "UNKNOWN"
	OrderStatusPENDINGPAYMENT OrderStatus = "PENDING_PAYMENT"
	OrderStatusPAID           OrderStatus = "PAID"
	OrderStatusCANCELLED      OrderStatus = "CANCELLED"
	OrderStatusASSEMBLED      OrderStatus = "ASSEMBLED"
)

// AllValues returns all OrderStatus values.
func (OrderStatus) AllValues() []OrderStatus {
	return []OrderStatus{
		OrderStatusUNKNOWN,
		OrderStatusPENDINGPAYMENT,
		OrderStatusPAID,
		OrderStatusCANCELLED,
		OrderStatusASSEMBLED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OrderStatus) MarshalText() ([]byte, error) {
	switch s {
	case OrderStatusUNKNOWN:
		return []byte(s), nil
	case OrderStatusPENDINGPAYMENT:
		return []byte(s), nil
	case OrderStatusPAID:
		return []byte(s), nil
	case OrderStatusCANCELLED:
		return []byte(s), nil
	case OrderStatusASSEMBLED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrderStatus) UnmarshalText(data []byte) error {
	switch OrderStatus(data) {
	case OrderStatusUNKNOWN:
		*s = OrderStatusUNKNOWN
		return nil
	case OrderStatusPENDINGPAYMENT:
		*s = OrderStatusPENDINGPAYMENT
		return nil
	case OrderStatusPAID:
		*s = OrderStatusPAID
		return nil
	case OrderStatusCANCELLED:
		*s = OrderStatusCANCELLED
		return nil
	case OrderStatusASSEMBLED:
		*s = OrderStatusASSEMBLED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/pay_order_request
type PayOrderRequest struct {
	PaymentMethod PaymentMethod `json:"payment_method"`
}

// GetPaymentMethod returns the value of PaymentMethod.
func (s *PayOrderRequest) GetPaymentMethod() PaymentMethod {
	return s.PaymentMethod
}

// SetPaymentMethod sets the value of PaymentMethod.
func (s *PayOrderRequest) SetPaymentMethod(val PaymentMethod) {
	s.PaymentMethod = val
}

// Ref: #/components/schemas/pay_order_response
type PayOrderResponse struct {
	// Unique identifier of the payment transaction.
	TransactionUUID uuid.UUID `json:"transaction_uuid"`
}

// GetTransactionUUID returns the value of TransactionUUID.
func (s *PayOrderResponse) GetTransactionUUID() uuid.UUID {
	return s.TransactionUUID
}

// SetTransactionUUID sets the value of TransactionUUID.
func (s *PayOrderResponse) SetTransactionUUID(val uuid.UUID) {
	s.TransactionUUID = val
}

func (*PayOrderResponse) payOrderRes() {}

// Payment method used for the order.
// Ref: #/components/schemas/payment_method
type PaymentMethod string

const (
	PaymentMethodUNKNOWN       PaymentMethod = "UNKNOWN"
	PaymentMethodCARD          PaymentMethod = "CARD"
	PaymentMethodSBP           PaymentMethod = "SBP"
	PaymentMethodCREDITCARD    PaymentMethod = "CREDIT_CARD"
	PaymentMethodINVESTORMONEY PaymentMethod = "INVESTOR_MONEY"
)

// AllValues returns all PaymentMethod values.
func (PaymentMethod) AllValues() []PaymentMethod {
	return []PaymentMethod{
		PaymentMethodUNKNOWN,
		PaymentMethodCARD,
		PaymentMethodSBP,
		PaymentMethodCREDITCARD,
		PaymentMethodINVESTORMONEY,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethod) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodUNKNOWN:
		return []byte(s), nil
	case PaymentMethodCARD:
		return []byte(s), nil
	case PaymentMethodSBP:
		return []byte(s), nil
	case PaymentMethodCREDITCARD:
		return []byte(s), nil
	case PaymentMethodINVESTORMONEY:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethod) UnmarshalText(data []byte) error {
	switch PaymentMethod(data) {
	case PaymentMethodUNKNOWN:
		*s = PaymentMethodUNKNOWN
		return nil
	case PaymentMethodCARD:
		*s = PaymentMethodCARD
		return nil
	case PaymentMethodSBP:
		*s = PaymentMethodSBP
		return nil
	case PaymentMethodCREDITCARD:
		*s = PaymentMethodCREDITCARD
		return nil
	case PaymentMethodINVESTORMONEY:
		*s = PaymentMethodINVESTORMONEY
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
